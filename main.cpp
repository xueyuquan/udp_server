/*********************************
 * UDP 服务端程序
 * *******************************/
#include <iostream>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <sys/stat.h>
#include <dirent.h>
#include <sys/mman.h>
#include <sys/wait.h>
#include <signal.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/msg.h>
#include <sys/sem.h>
#include <pthread.h>
#include <semaphore.h>
#include <poll.h>
#include <sys/epoll.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

using namespace std;

unsigned char rbuf[200];
unsigned char sbuf[8] = {0x01, 0x03, 0x00, 0x00, 0x00, 0x67, 0x04, 0x19};
unsigned char rbuf_mb[213] = {0x01, 0x03, 0xD0, 0x04, 0x08, 0x04, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8,
                              0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8,
                              0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8,
                              0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8,
                              0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8,
                              0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8,
                              0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8,
                              0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8,
                              0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8,
                              0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x03, 0xe8,
                              0x04, 0x08, 0x03, 0xe8, 0x04, 0x08, 0x04, 0xe6, 0x22, 0x33
};
int count = 0;

int main(void)
{
    int sockfd;
    int size;
    int ret;
    int on = 1;
    struct sockaddr_in saddr;
    struct sockaddr_in raddr;
    //设置地址信息,ip信息
    size = sizeof(struct sockaddr_in);
    bzero(&saddr, size);
    saddr.sin_family = AF_INET;
    saddr.sin_port = htons(29954);
    saddr.sin_addr.s_addr = htonl(INADDR_ANY);
    //创建UDP的套接字
    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if(sockfd < 0)
    {
        perror("socket failed");
        return -1;
    }
    //设置端口复用
    setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &on, sizeof(on));
    //绑定端口复用
    ret = bind(sockfd, (struct sockaddr*)&saddr, sizeof(struct sockaddr));
    if(ret < 0)
    {
        perror("sbind failed");
        return -1;
    }
    socklen_t val = sizeof(struct sockaddr);
    //循环接收客户端发来的消息
    while (1)
    {
        puts("waiting data");
        ret = recvfrom(sockfd, rbuf, 200, 0, (struct sockaddr*)&raddr, &val);
        if(ret < 0)
        {
            perror("recvfrom, failed");
        }
        for (int i = 0; i < 8; i++)
        {
            if(rbuf[i] == sbuf[i])
            {
                printf("%02x ", rbuf[i]);
                count++;
            }
        }
        cout << endl;

        printf("count = %d\n", count);

        if(count == 8)
        {
            count = 0;
            ret = sendto(sockfd, rbuf_mb, 213, 0, (struct sockaddr*)&raddr, sizeof(struct sockaddr));
            if(ret < 0)
            {
                perror("sendto failed!");
            }else{
                printf("send successfully!");
            }
        }

        ret = sendto(sockfd, rbuf_mb, 213, 0, (struct sockaddr*)&raddr, sizeof(struct sockaddr));
        if(ret < 0)
        {
            perror("sendto failed!");
        }else{
            printf("send successfully!");
        }
        bzero(rbuf, 200);
    }
    //关闭UDP套接字，这里不可达
    close(sockfd);
    return 0;
}
